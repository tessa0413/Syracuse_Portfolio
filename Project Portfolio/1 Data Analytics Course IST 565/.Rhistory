knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(gridExtra)
library(caret)
library(partykit)
install.packages("partykit")
library(tidyverse)
library(gridExtra)
library(caret)
library(partykit)
library(rpart)
library(rpart.plot)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(gridExtra)
library(caret)
library(partykit)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(tidyverse)
library(gridExtra)
library(caret)
library(partykit)
library(rpart)
library(rpart.plot)
library(e1071)
library(arules)
library(arulesViz)
install.packages("arulesViz")
library(tidyverse)
library(gridExtra)
library(caret)
library(partykit)
library(rpart)
library(rpart.plot)
library(e1071)
library(arules)
library(arulesViz)
ReadmitData <- read.csv("C:/Users/tessa/OneDrive/School/IST 565/Hospital Readmit Data.csv")
ReadmitData$readmitted <- as.factor(ReadmitData$readmitted)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(gridExtra)
library(caret)
library(partykit)
library(rpart)
library(rpart.plot)
library(e1071)
library(arules)
library(arulesViz)
ReadmitData <- read.csv("C:/Users/tessa/OneDrive/School/IST 565/Hospital Readmit Data.csv")
ReadmitData$readmitted <- as.factor(ReadmitData$readmitted)
r1 <-ReadmitData %>%
ggplot(aes(x=time_in_hospital, color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Time in Hosptial", y= "Density") +
ggtitle("Readmission and Time in Hopsital")
r2 <-ReadmitData %>%
ggplot(aes(x=num_lab_procedures,  color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Labs", y= "Density") +
ggtitle("Readmission and Number of Labs")
r3 <-ReadmitData %>%
ggplot(aes(x=num_procedures,  color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Procedures", y= "Density") +
ggtitle("Readmission and Number of Procedures")
r4 <-ReadmitData %>%
ggplot(aes(x=num_medications, color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Medications", y= "Density") +
ggtitle("Readmission and Number of Medications")
grid.arrange(r1,r2,r3,r4, ncol =2)
library(psych)
pairs.panels(ReadmitData[c("time_in_hospital", "num_lab_procedures", "num_procedures", "num_medications","number_outpatient", "number_emergency", "number_inpatient", "number_diagnoses", "readmitted")])
set.seed(77)
## Normalize the values... then group by readmitted or not to make sure that the distribution of readmittion is equal.
normalize <- function(x){
return((x- min(x)) / (max(x)- min(x)))
}
ReadmitDataNorm <- ReadmitData %>%
mutate_if(is.numeric, list(normalize)) ##%>%
normalize <- function(x){
return((x- min(x)) / (max(x)- min(x)))
}
ReadmitDataNorm <- ReadmitData %>%
mutate_if(is.numeric, list(normalize)) ##%>%
ReadmitDataNorm <- ReadmitData %>%
mutate_if(is.numeric, normalize) ##%>%
Readmit_Train <- ReadmitDataNorm  %>%
rownames_to_column() %>%
group_by(readmitted) %>%
sample_frac(0.8) %>%
ungroup()
Readmit_Test <- ReadmitDataNorm %>%
rownames_to_column() %>%
anti_join(Readmit_Train, by = c("rowname"="rowname"))
Readmit_Train <- Readmit_Train[,-1]
Readmit_Test <- Readmit_Test[,-1]
ReadmitDataNorm <- ReadmitDataNorm %>%
mutate(readmitfact = as.logical(if_else( as.integer(readmitted) > 1, "TRUE", "FALSE")))
## Set up clusters
ReadmitDataNormCat <- ReadmitDataNorm %>%
mutate_if(is.numeric, funs(discretize(., method = "cluster", breaks = 5)))
library(tidyverse)
library(gridExtra)
library(caret)
library(partykit)
library(rpart)
library(rpart.plot)
library(e1071)
library(arules)
library(arulesViz)
ReadmitData <- read.csv("C:/Users/tessa/OneDrive/School/IST 565/Hospital Readmit Data.csv")
ReadmitData$readmitted <- as.factor(ReadmitData$readmitted)
r1 <-ReadmitData %>%
ggplot(aes(x=time_in_hospital, color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Time in Hosptial", y= "Density") +
ggtitle("Readmission and Time in Hopsital")
r2 <-ReadmitData %>%
ggplot(aes(x=num_lab_procedures,  color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Labs", y= "Density") +
ggtitle("Readmission and Number of Labs")
r3 <-ReadmitData %>%
ggplot(aes(x=num_procedures,  color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Procedures", y= "Density") +
ggtitle("Readmission and Number of Procedures")
r4 <-ReadmitData %>%
ggplot(aes(x=num_medications, color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Medications", y= "Density") +
ggtitle("Readmission and Number of Medications")
grid.arrange(r1,r2,r3,r4, ncol =2)
library(psych)
pairs.panels(ReadmitData[c("time_in_hospital", "num_lab_procedures", "num_procedures", "num_medications","number_outpatient", "number_emergency", "number_inpatient", "number_diagnoses", "readmitted")])
set.seed(77)
## Normalize the values... then group by readmitted or not to make sure that the distribution of readmittion is equal.
normalize <- function(x){
return((x- min(x)) / (max(x)- min(x)))
}
ReadmitDataNorm <- ReadmitData %>%
mutate_if(is.numeric, normalize) ##%>%
##  mutate_if(is.numeric, funs(discretize(., method = "cluster", breaks = 5)))
Readmit_Train <- ReadmitDataNorm  %>%
rownames_to_column() %>%
group_by(readmitted) %>%
sample_frac(0.8) %>%
ungroup()
Readmit_Test <- ReadmitDataNorm %>%
rownames_to_column() %>%
anti_join(Readmit_Train, by = c("rowname"="rowname"))
Readmit_Train <- Readmit_Train[,-1]
Readmit_Test <- Readmit_Test[,-1]
ReadmitDataNorm <- ReadmitDataNorm %>%
mutate(readmitfact = as.logical(if_else( as.integer(readmitted) > 1, "TRUE", "FALSE")))
## Set up clusters
ReadmitDataNormCat <- ReadmitDataNorm %>%
mutate_if(is.numeric, funs(discretize(., method = "cluster", breaks = 5)))
## Set up clusters
ReadmitDataNormCat <- ReadmitDataNorm %>%
mutate_if(is.numeric, funs(discretize(..., method = "cluster", breaks = 5)))
## Set up clusters
ReadmitDataNormCat <- ReadmitDataNorm %>%
mutate_if(is.numeric, funs(discretize(., method = "cluster", breaks = 5)))
ReadmitDataNormCat <- ReadmitDataNorm %>%
mutate_if(is.numeric, funs(discretize(x, method = "cluster", breaks = 5)))
## Set up clusters
ReadmitDataNormCat <- ReadmitDataNorm %>%
mutate_if(is.numeric, funs(discretize(., method = "cluster", breaks = 5)))
ReadmitDataNormCat <- ReadmitDataNorm %>%
mutate_if(is.numeric, funs(discretize(., method = "cluster", categories = 5)))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(gridExtra)
library(caret)
library(partykit)
library(rpart)
library(rpart.plot)
library(e1071)
library(arules)
library(arulesViz)
ReadmitData <- read.csv("C:/Users/tessa/OneDrive/School/IST 565/Hospital Readmit Data.csv")
ReadmitData$readmitted <- as.factor(ReadmitData$readmitted)
r1 <-ReadmitData %>%
ggplot(aes(x=time_in_hospital, color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Time in Hosptial", y= "Density") +
ggtitle("Readmission and Time in Hopsital")
r2 <-ReadmitData %>%
ggplot(aes(x=num_lab_procedures,  color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Labs", y= "Density") +
ggtitle("Readmission and Number of Labs")
r3 <-ReadmitData %>%
ggplot(aes(x=num_procedures,  color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Procedures", y= "Density") +
ggtitle("Readmission and Number of Procedures")
r4 <-ReadmitData %>%
ggplot(aes(x=num_medications, color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Medications", y= "Density") +
ggtitle("Readmission and Number of Medications")
grid.arrange(r1,r2,r3,r4, ncol =2)
library(psych)
pairs.panels(ReadmitData[c("time_in_hospital", "num_lab_procedures", "num_procedures", "num_medications","number_outpatient", "number_emergency", "number_inpatient", "number_diagnoses", "readmitted")])
library(psych)
pairs.panels(ReadmitData[c("time_in_hospital", "num_lab_procedures", "num_procedures", "num_medications","number_outpatient", "number_emergency", "number_inpatient", "number_diagnoses", "readmitted")])
set.seed(77)
## Normalize the values... then group by readmitted or not to make sure that the distribution of readmittion is equal.
normalize <- function(x){
return((x- min(x)) / (max(x)- min(x)))
}
ReadmitDataNorm <- ReadmitData %>%
mutate_if(is.numeric, normalize) ##%>%
##  mutate_if(is.numeric, funs(discretize(., method = "cluster", breaks = 5)))
Readmit_Train <- ReadmitDataNorm  %>%
rownames_to_column() %>%
group_by(readmitted) %>%
sample_frac(0.8) %>%
ungroup()
Readmit_Test <- ReadmitDataNorm %>%
rownames_to_column() %>%
anti_join(Readmit_Train, by = c("rowname"="rowname"))
Readmit_Train <- Readmit_Train[,-1]
Readmit_Test <- Readmit_Test[,-1]
ReadmitDataNorm <- ReadmitDataNorm %>%
mutate(readmitfact = as.logical(if_else( as.integer(readmitted) > 1, "TRUE", "FALSE")))
## Set up clusters
ReadmitDataNormCat <- ReadmitDataNorm %>%
mutate_if(is.numeric, funs(discretize(., method = "cluster", categories = 5)))
Readmit_TrainCat <- ReadmitDataNormCat  %>%
rownames_to_column() %>%
group_by(readmitted) %>%
sample_frac(0.8) %>%
ungroup()
Readmit_TestCat <- ReadmitDataNormCat %>%
rownames_to_column() %>%
anti_join(Readmit_TrainCat, by = c("rowname"="rowname"))
Readmit_TrainCat <- Readmit_TrainCat[,-1]
Readmit_TestCat <- Readmit_TestCat[,-1]
library(randomForest)
set.seed(77)
trees <- randomForest(ReadmitDataNorm[, 1:64], ReadmitDataNorm$readmitted)
trees
varImpPlot(trees)
importance(trees)
set.seed(77)
treescat <- randomForest(ReadmitDataNormCat[, 1:64], ReadmitDataNormCat$readmitted)
treescat
varImpPlot(treescat)
importance(treescat)
set.seed(77)
treescut <- randomForest(ReadmitDataNorm[,c("time_in_hospital","num_lab_procedures","num_medications", "num_procedures","number_inpatient", "number_diagnoses", "number_outpatient", "number_emergency", "race_Caucasian", "gender_Female", "age_.70.80.","medical_specialty_.")], ReadmitDataNorm$readmitted)
treescut
varImpPlot(treescut)
importance(treescut)
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85),
appearance = list(default="lhs", rhs="readmitted=1"),
control = list(verbose=F))
rules <- sort(rules,decreaseing = TRUE, by= c('confidence','lift','support'))
inspect(rules[1:5])
plot(rules[1:5], method = "graph")
##Test for Optimial Number of Clusters
library(factoextra)
set.seed(77)
fviz_nbclust(ReadmitDataNorm[,-65],kmeans,method = "wss")
ReadmitDataNorm
ReadmitDataNorm
ReadmitDataNormCat
ReadmitData
ReadmitDataNorm
ReadmitDataNormCat
ReadmitData.head()
ReadmitData
ReadmitDataNorm
ReadmitDataNormCat
library(randomForest)
set.seed(77)
trees <- randomForest(ReadmitDataNorm[, 1:64], ReadmitDataNorm$readmitted)
trees
varImpPlot(trees)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(gridExtra)
library(caret)
library(partykit)
library(rpart)
library(rpart.plot)
library(e1071)
library(arules)
library(arulesViz)
ReadmitData <- read.csv("C:/Users/tessa/OneDrive/School/IST 565/Hospital Readmit Data.csv")
ReadmitData$readmitted <- as.factor(ReadmitData$readmitted)
r1 <-ReadmitData %>%
ggplot(aes(x=time_in_hospital, color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Time in Hosptial", y= "Density") +
ggtitle("Readmission and Time in Hopsital")
r2 <-ReadmitData %>%
ggplot(aes(x=num_lab_procedures,  color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Labs", y= "Density") +
ggtitle("Readmission and Number of Labs")
r3 <-ReadmitData %>%
ggplot(aes(x=num_procedures,  color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Procedures", y= "Density") +
ggtitle("Readmission and Number of Procedures")
r4 <-ReadmitData %>%
ggplot(aes(x=num_medications, color=readmitted)) +
geom_density() +
theme_minimal() +
labs(x="Medications", y= "Density") +
ggtitle("Readmission and Number of Medications")
grid.arrange(r1,r2,r3,r4, ncol =2)
library(psych)
pairs.panels(ReadmitData[c("time_in_hospital", "num_lab_procedures", "num_procedures", "num_medications","number_outpatient", "number_emergency", "number_inpatient", "number_diagnoses", "readmitted")])
set.seed(77)
## Normalize the values... then group by readmitted or not to make sure that the distribution of readmittion is equal.
normalize <- function(x){
return((x- min(x)) / (max(x)- min(x)))
}
ReadmitDataNorm <- ReadmitData %>%
mutate_if(is.numeric, normalize) ##%>%
##  mutate_if(is.numeric, funs(discretize(., method = "cluster", breaks = 5)))
Readmit_Train <- ReadmitDataNorm  %>%
rownames_to_column() %>%
group_by(readmitted) %>%
sample_frac(0.8) %>%
ungroup()
Readmit_Test <- ReadmitDataNorm %>%
rownames_to_column() %>%
anti_join(Readmit_Train, by = c("rowname"="rowname"))
Readmit_Train <- Readmit_Train[,-1]
Readmit_Test <- Readmit_Test[,-1]
ReadmitDataNorm <- ReadmitDataNorm %>%
mutate(readmitfact = as.logical(if_else( as.integer(readmitted) > 1, "TRUE", "FALSE")))
## Set up clusters
ReadmitDataNormCat <- ReadmitDataNorm %>%
mutate_if(is.numeric, funs(discretize(., method = "cluster", categories = 5)))
Readmit_TrainCat <- ReadmitDataNormCat  %>%
rownames_to_column() %>%
group_by(readmitted) %>%
sample_frac(0.8) %>%
ungroup()
Readmit_TestCat <- ReadmitDataNormCat %>%
rownames_to_column() %>%
anti_join(Readmit_TrainCat, by = c("rowname"="rowname"))
Readmit_TrainCat <- Readmit_TrainCat[,-1]
Readmit_TestCat <- Readmit_TestCat[,-1]
ReadmitData
ReadmitDataNorm
ReadmitDataNormCat
library(randomForest)
set.seed(77)
trees <- randomForest(ReadmitDataNorm[, 1:64], ReadmitDataNorm$readmitted)
trees
varImpPlot(trees)
importance(trees)
set.seed(77)
treescat <- randomForest(ReadmitDataNormCat[, 1:64], ReadmitDataNormCat$readmitted)
treescat
varImpPlot(treescat)
importance(treescat)
set.seed(77)
treescut <- randomForest(ReadmitDataNorm[,c("time_in_hospital","num_lab_procedures","num_medications", "num_procedures","number_inpatient", "number_diagnoses", "number_outpatient", "number_emergency", "race_Caucasian", "gender_Female", "age_.70.80.","medical_specialty_.")], ReadmitDataNorm$readmitted)
treescut
varImpPlot(treescut)
importance(treescut)
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85),
appearance = list(default="lhs", rhs="readmitted=1"),
control = list(verbose=F))
rules <- sort(rules,decreaseing = TRUE, by= c('confidence','lift','support'))
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85),
appearance = list(default="lhs", rhs="readmitted=1"),
control = list(verbose=F))
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85),
appearance = list(default="lhs", rhs="readmitted=1"))
rules <- sort(rules,decreaseing = TRUE, by= c('confidence','lift','support'))
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85),
appearance = list(default="lhs", rhs="readmitted=1"),
control = list(verbose=F))
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85),
appearance = list(default="lhs", rhs="readmitted=1"),
control = list(verbose=F))
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85),
appearance = list(default="lhs", rhs="readmitted=1"))
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.55),
appearance = list(default="lhs", rhs="readmitted=1"))
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85)
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85))
rules <- apriori(ReadmitDataNormCat, parameter = list(supp=0.001,conf=0.85))
ReadmitData
ReadmitDataNorm
ReadmitDataNormCat
##Test for Optimial Number of Clusters
library(factoextra)
set.seed(77)
fviz_nbclust(ReadmitDataNorm[,-65],kmeans,method = "wss")
